!function(e){function t(n){if(o[n])return o[n].exports;var s=o[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,t),s.l=!0,s.exports}var o={};t.m=e,t.c=o,t.d=function(e,o,n){t.o(e,o)||Object.defineProperty(e,o,{configurable:!1,enumerable:!0,get:n})},t.n=function(e){var o=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(o,"a",o),o},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=2)}([function(e,t){e.exports=React},function(e,t){},function(e,t,o){"use strict";function n(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}Object.defineProperty(t,"__esModule",{value:!0}),n(o(3)),n(o(4))},function(e,t,o){"use strict";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o])};return function(t,o){function n(){this.constructor=t}e(t,o),t.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}();Object.defineProperty(t,"__esModule",{value:!0});var s=o(0);o(1);var a=function(e){function t(t){var o=e.call(this,t)||this;o.componentId="",o.flowKey="",o.attributes={},o.selectedItem=null,o.text="",o.componentId=t.id,o.flowKey=t.flowKey;var n=manywho.model.getComponent(o.props.id,o.props.flowKey);if(n.attributes)for(var s in n.attributes)o.attributes[s]=n.attributes[s];return o}return n(t,e),t.prototype.componentDidMount=function(){var e=manywho.model.getComponent(this.props.id,this.props.flowKey),t=manywho.state.getComponent(this.props.id,this.props.flowKey),o=e.contentValue?parseInt(e.contentValue):1;t.contentValue=o,this.forceUpdate()},t.prototype.componentDidUpdate=function(){},t.prototype.getAttribute=function(e){return this.attributes[e]?this.attributes[e]:null},t.prototype.sortByKey=function(e,t){return e.sort(function(e,o){var n=e[t],s=o[t];return n<s?-1:n>s?1:0})},t.prototype.render=function(){var e=manywho.model.getComponent(this.props.id,this.props.flowKey),t=manywho.state.getComponent(this.props.id,this.props.flowKey),o=e.contentValue?parseInt(e.contentValue):1;if(t.loading)return s.createElement("div",{className:"dsg-simo-progress col-sm-6"}," ");var n=[];if(e.objectData&&e.objectData.length>0)for(var a=0;a<e.objectData.length;a++){var r=e.objectData[a],i={};i.key=manywho.utils.getObjectDataProperty(r.properties,"key").contentValue,i.label=manywho.utils.getObjectDataProperty(r.properties,"label").contentValue,i.name=manywho.utils.getObjectDataProperty(r.properties,"name").contentValue,i.value=manywho.utils.getObjectDataProperty(r.properties,"value").contentValue,n.push(i)}n=this.sortByKey(n,"key");for(var c=[],l="",p=0;p<n.length;p++){var m=n[p];l="glyphicon glyphicon-"+m.value+" dsg-simo-progress-icon ",parseInt(m.key)<o?l+=" dsg-simo-progress-icon-complete":parseInt(m.key)===o?l+=" dsg-simo-progress-icon-active":l+=" dsg-simo-progress-icon-incomplete";var u=s.createElement("span",{className:l});c.push(u)}e.width,e.height;return s.createElement("div",{className:"dsg-simo-progress col-sm-6"},s.createElement("div",{className:"dsg-simo-progress-inner"},c))},t}(s.Component);manywho.component.register("DsgSimoProgress",a),t.default=a},function(e,t,o){"use strict";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o])};return function(t,o){function n(){this.constructor=t}e(t,o),t.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}();Object.defineProperty(t,"__esModule",{value:!0});var s=o(0);o(1);var a=function(e){function t(t){var o=e.call(this,t)||this;o.componentId="",o.flowKey="",o.attributes={},o.selectedItem=null,o.text="",o.componentId=t.id,o.flowKey=t.flowKey;var n=manywho.model.getComponent(o.props.id,o.props.flowKey);if(n.attributes)for(var s in n.attributes)o.attributes[s]=n.attributes[s];return o}return n(t,e),t.prototype.componentDidMount=function(){var e=manywho.model.getComponent(this.props.id,this.props.flowKey);manywho.state.getComponent(this.props.id,this.props.flowKey);manywho.state.setComponent(this.props.id,{objectData:[e.objectData[0]]},this.props.flowKey,!0),this.forceUpdate()},t.prototype.componentDidUpdate=function(){var e=manywho.model.getComponent(this.props.id,this.props.flowKey);manywho.state.getComponent(this.props.id,this.props.flowKey);manywho.state.setComponent(this.props.id,{objectData:[e.objectData[0]]},this.props.flowKey,!0)},t.prototype.getAttribute=function(e){return this.attributes[e]?this.attributes[e]:null},t.prototype.render=function(){var e=manywho.model.getComponent(this.props.id,this.props.flowKey);if(manywho.state.getComponent(this.props.id,this.props.flowKey).loading)return s.createElement("div",{className:"dsg-simo-product col-sm-6"}," ");if(e.objectData&&e.objectData[0]){var t=e.objectData[0],o=(manywho.utils.getObjectDataProperty(t.properties,"Manufacturer").contentValue,manywho.utils.getObjectDataProperty(t.properties,"Product").contentValue),n=manywho.utils.getObjectDataProperty(t.properties,"Model").contentValue,a=manywho.utils.getObjectDataProperty(t.properties,"Spec").contentValue,r=manywho.utils.getObjectDataProperty(t.properties,"ContractPeriod").contentValue,i=manywho.utils.getObjectDataProperty(t.properties,"MonthlyMinutes").contentValue,c=manywho.utils.getObjectDataProperty(t.properties,"MonthlyTexts").contentValue,l=manywho.utils.getObjectDataProperty(t.properties,"MonthlyData").contentValue,p=manywho.utils.getObjectDataProperty(t.properties,"MonthlyCost").contentValue,m=manywho.utils.getObjectDataProperty(t.properties,"InitialCost").contentValue;manywho.utils.getObjectDataProperty(t.properties,"Provider").contentValue;return s.createElement("div",{className:"dsg-simo-product col-sm-6"},s.createElement("div",{className:"dsg-simo-product-inner"},s.createElement("div",{className:"dsg-simo-product-top"},s.createElement("div",{className:"dsg-simo-product-titlebar"},s.createElement("span",{className:"dsg-simo-product-title"},o," ",n," ",a)),s.createElement("div",{className:"dsg-simo-product-detailbar"},s.createElement("div",{className:"dsg-simo-product-detailbar-element"},s.createElement("span",{className:"glyphicon glyphicon-calendar dsg-simo-product-element-icon"}),s.createElement("span",{className:"dsg-simo-product-element-text"},r),s.createElement("span",{className:"dsg-simo-product-element-label"},"Months")),s.createElement("div",{className:"dsg-simo-product-detailbar-element"},s.createElement("span",{className:"glyphicon glyphicon-earphone dsg-simo-product-element-icon"}),s.createElement("span",{className:"dsg-simo-product-element-text"},i),s.createElement("span",{className:"dsg-simo-product-element-label"},"Minutes")),s.createElement("div",{className:"dsg-simo-product-detailbar-element"},s.createElement("span",{className:"glyphicon glyphicon-text-size dsg-simo-product-element-icon"}),s.createElement("span",{className:"dsg-simo-product-element-text"},c),s.createElement("span",{className:"dsg-simo-product-element-label"},"Texts")),s.createElement("div",{className:"dsg-simo-product-detailbar-element"},s.createElement("span",{className:"glyphicon glyphicon-cloud-download dsg-simo-product-element-icon"}),s.createElement("span",{className:"dsg-simo-product-element-text"},l),s.createElement("span",{className:"dsg-simo-product-element-label"},"MB")),s.createElement("div",{className:"dsg-simo-product-detailbar-element"},s.createElement("div",null,s.createElement("span",{className:"dsg-simo-product-cost"},"£",p),s.createElement("span",{className:"dsg-simo-product-cost"},"Monthly")),s.createElement("div",null,s.createElement("span",{className:"dsg-simo-product-cost"},"£",m),s.createElement("span",{className:"dsg-simo-product-cost"},"Upfront"))))),s.createElement("div",{className:"dsg-simo-product-bottom-bottom"},s.createElement("div",{className:"dsg-simo-product-bottom"},s.createElement("div",{className:"dsg-simo-product-bottom-element"},s.createElement("div",null,s.createElement("span",{className:"dsg-simo-bottom-title"},"Upfront")),s.createElement("div",null,s.createElement("span",{className:"dsg-simo-bottom-value"},"£",m))),s.createElement("div",{className:"dsg-simo-product-bottom-element"},s.createElement("div",null,s.createElement("span",{className:"dsg-simo-bottom-title"},"Monthly")),s.createElement("div",null,s.createElement("span",{className:"dsg-simo-bottom-value"},"£",p)))))))}return s.createElement("div",{className:"dsg-simo-product col-sm-6"}," ")},t}(s.Component);manywho.component.register("DsgSimoProduct",a),t.default=a}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,